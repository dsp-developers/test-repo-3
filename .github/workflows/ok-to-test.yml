name: Slash Command Listener

on:
  issue_comment:
    types:
      - created

jobs:
  process-command:
    runs-on: ubuntu-latest
    if: (github.event.comment.body == '/ok-to-test') || (github.event.comment.body == '/rerun')
    outputs:
      runs: ${{ steps.get-runs.outputs.runs }}
    steps:
      # Check if the author is a member or Owner
      - name: Check Slash Command and User Association
        id: check-condition
        run: |
          echo "slash_command=${{github.event.comment.body}}" >> $GITHUB_ENV
          if [[ "${{ github.event.comment.author_association }}" == "MEMBER" || "${{ github.event.comment.author_association }}" == "OWNER" ]]; then
            echo "condition_met=true" >> $GITHUB_ENV
          else
            echo "User does not have permission to trigger this command."
            echo "condition_met=false" >> $GITHUB_ENV
          fi

      - name: Leave a Comment on Precondition Fail
        if: env.condition_met == 'false'
        env:
          message: ðŸš« This command cannot be processed. Only organization members or owners can use the commands.
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh issue comment ${{ github.event.issue.number }} --repo "${{ github.repository }}" --body "${{ env.message }}"
          echo ${message}
          exit 1

      - name: Check if comment is on a pull request
        id: check-pr
        run: |
          if [[ -z "${{ github.event.issue.pull_request }}" ]]; then
            echo "Comment is not on a pull request."
            exit 1
          fi
          echo "PR_URL=${{ github.event.issue.pull_request.url }}" >> $GITHUB_ENV

      - name: Fetch pull request sha
        id: fetch-pr-sha
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL="${PR_URL}"
          PR_DATA=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$PR_URL")
          PR_SHA=$(echo "$PR_DATA" | jq -r '.head.sha')
          echo "PR_SHA=$PR_SHA" >> $GITHUB_ENV

      - name: Get runs
        id: get-runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_SHA: ${{ env.PR_SHA }}
        run: |
          runs=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=${PR_SHA}")
          
          echo $runs
#          echo "runs=${runs}" >> $GITHUB_ENV


#  approve:
#    runs-on: ubuntu-latest
#    needs: process-command
#    if: github.event.comment.body == '/ok-to-test'
#    steps:
#      # Approve Run if the condition is met
#      - name: Approve Run
#        id: approve
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          PR_SHA: ${{ needs.process-command.outputs.PR_SHA }}
#        run: |
#          # Extract the PR head SHA
#
#          # Get the run_id of the current workflow run
#          runs=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
#            -H "Accept: application/vnd.github.v3+json" \
#            "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=${PR_SHA}" | \
#            jq -r '.workflow_runs[] | select(.conclusion == "action_required") | .id')
#
#          # Approve the workflow run
#          if [[ -z "$runs" ]]; then
#            msg="No workflow runs requiring approval detected for this Pull Request."
#            echo "output_msg=${msg}" >> $GITHUB_ENV
#          else
#            echo "Found workflow runs requiring approval: $runs"
#            # Approve each workflow run
#            for run_id in $runs; do
#              curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
#                -H "Accept: application/vnd.github.v3+json" \
#                "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id/approve"
#              echo "Approved workflow run: $run_id"
#            done
#            msg="Approvals successfully granted for pending runs."
#            echo "output_msg=${msg}" >> $GITHUB_ENV
#          fi

#      - name: Leave a Comment
#        env:
#          message: ${{ env.output_msg }}
#        run: |
#          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
#          gh issue comment ${{ github.event.issue.number }} --repo "${{ github.repository }}" --body "${{ env.message }}"
#

      # Comment on output message
#      - name: Post Comment for Invalid Condition
#        if: (steps.approve.outcome == 'success') && env.output_msg
#        uses: peter-evans/create-or-update-comment@v3
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          issue-number: ${{ github.event.issue.number }}
#          body: ${{ env.output_msg }}
#  rerun:
#    runs-on: ubuntu-latest
#    needs: process-command
#    if: github.event.comment.body == '/rerun'
#    steps:
#      - name: Re-Run
#        id: rerun
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          PR_SHA: ${{ needs.process-command.outputs.PR_SHA }}
#        run: |
#          # Get the run_id of the current workflow run
#          runs=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
#            -H "Accept: application/vnd.github.v3+json" \
#            "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=$PR_SHA" | \
#            jq -r '.workflow_runs[] | .id')
#
#          if [[ -z "$runs" ]]; then
#            msg="No workflow detected for this Pull Request."
#            echo "output_msg=${msg}" >> $GITHUB_ENV
#          else
#            echo "Found workflow runs to trigger: $runs"
#            # Rerun each workflow run
#            #for run_id in $runs; do
#            #  curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
#            #    -H "Accept: application/vnd.github.v3+json" \
#            #    "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id/rerun"
#            #  echo "Triggered workflow run: $run_id"
#            #done
#            msg="Runs for this pull request were re-triggered."
#            echo "output_msg=${msg}" >> $GITHUB_ENV
#          fi

#      - name: Leave a Comment
#        env:
#          message: ${{ env.output_msg }}
#        run: |
#          gh issue comment ${{ github.event.issue.number }} --repo "${{ github.repository }}" --body "${{ env.message }}"
